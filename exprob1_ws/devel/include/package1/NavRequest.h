// Generated by gencpp from file package1/NavRequest.msg
// DO NOT EDIT!


#ifndef PACKAGE1_MESSAGE_NAVREQUEST_H
#define PACKAGE1_MESSAGE_NAVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <package1/Position.h>

namespace package1
{
template <class ContainerAllocator>
struct NavRequest_
{
  typedef NavRequest_<ContainerAllocator> Type;

  NavRequest_()
    : in()  {
    }
  NavRequest_(const ContainerAllocator& _alloc)
    : in(_alloc)  {
  (void)_alloc;
    }



   typedef  ::package1::Position_<ContainerAllocator>  _in_type;
  _in_type in;





  typedef boost::shared_ptr< ::package1::NavRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::package1::NavRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NavRequest_

typedef ::package1::NavRequest_<std::allocator<void> > NavRequest;

typedef boost::shared_ptr< ::package1::NavRequest > NavRequestPtr;
typedef boost::shared_ptr< ::package1::NavRequest const> NavRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::package1::NavRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::package1::NavRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace package1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'package1': ['/home/sabrino/exprob/exprob1_ws/src/package1/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::package1::NavRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package1::NavRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package1::NavRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package1::NavRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package1::NavRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package1::NavRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::package1::NavRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54b245c98777dbddb65707f6e8c16925";
  }

  static const char* value(const ::package1::NavRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54b245c98777dbddULL;
  static const uint64_t static_value2 = 0xb65707f6e8c16925ULL;
};

template<class ContainerAllocator>
struct DataType< ::package1::NavRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package1/NavRequest";
  }

  static const char* value(const ::package1::NavRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::package1::NavRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package1/Position in\n\
\n\
================================================================================\n\
MSG: package1/Position\n\
int64 x\n\
int64 y\n\
";
  }

  static const char* value(const ::package1::NavRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::package1::NavRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.in);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::package1::NavRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::package1::NavRequest_<ContainerAllocator>& v)
  {
    s << indent << "in: ";
    s << std::endl;
    Printer< ::package1::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.in);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACKAGE1_MESSAGE_NAVREQUEST_H
